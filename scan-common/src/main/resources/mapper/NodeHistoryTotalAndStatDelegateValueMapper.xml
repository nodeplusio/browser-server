<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.platon.browser.dao.mapper.NodeHistoryTotalAndStatDelegateValueMapper">
  <resultMap id="BaseResultMap" type="com.platon.browser.dao.entity.NodeHistoryTotalAndStatDelegateValue">
    <id column="node_id" jdbcType="VARCHAR" property="nodeId" />
    <id column="date" jdbcType="TIMESTAMP" property="date" />
    <result column="stat_delegate_value_max" jdbcType="DECIMAL" property="statDelegateValueMax" />
    <result column="stat_delegate_value_min" jdbcType="DECIMAL" property="statDelegateValueMin" />
    <result column="stat_delegate_value_avg" jdbcType="DECIMAL" property="statDelegateValueAvg" />
    <result column="stat_delegate_value_total" jdbcType="DECIMAL" property="statDelegateValueTotal" />
    <result column="stat_delegate_value_count" jdbcType="INTEGER" property="statDelegateValueCount" />
    <result column="stat_staking_value_max" jdbcType="DECIMAL" property="statStakingValueMax" />
    <result column="stat_staking_value_min" jdbcType="DECIMAL" property="statStakingValueMin" />
    <result column="stat_staking_value_avg" jdbcType="DECIMAL" property="statStakingValueAvg" />
    <result column="stat_staking_value_total" jdbcType="DECIMAL" property="statStakingValueTotal" />
    <result column="stat_staking_value_count" jdbcType="INTEGER" property="statStakingValueCount" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    node_id, `date`, stat_delegate_value_max, stat_delegate_value_min, stat_delegate_value_avg, 
    stat_delegate_value_total, stat_delegate_value_count, stat_staking_value_max, stat_staking_value_min, 
    stat_staking_value_avg, stat_staking_value_total, stat_staking_value_count, create_time, 
    update_time
  </sql>
  <select id="selectByExample" parameterType="com.platon.browser.dao.entity.NodeHistoryTotalAndStatDelegateValueExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from node_history_total_and_stat_delegate_value
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="com.platon.browser.dao.entity.NodeHistoryTotalAndStatDelegateValueKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from node_history_total_and_stat_delegate_value
    where node_id = #{nodeId,jdbcType=VARCHAR}
      and `date` = #{date,jdbcType=TIMESTAMP}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.platon.browser.dao.entity.NodeHistoryTotalAndStatDelegateValueKey">
    delete from node_history_total_and_stat_delegate_value
    where node_id = #{nodeId,jdbcType=VARCHAR}
      and `date` = #{date,jdbcType=TIMESTAMP}
  </delete>
  <delete id="deleteByExample" parameterType="com.platon.browser.dao.entity.NodeHistoryTotalAndStatDelegateValueExample">
    delete from node_history_total_and_stat_delegate_value
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.platon.browser.dao.entity.NodeHistoryTotalAndStatDelegateValue">
    insert into node_history_total_and_stat_delegate_value (node_id, `date`, stat_delegate_value_max, 
      stat_delegate_value_min, stat_delegate_value_avg, 
      stat_delegate_value_total, stat_delegate_value_count, 
      stat_staking_value_max, stat_staking_value_min, 
      stat_staking_value_avg, stat_staking_value_total, 
      stat_staking_value_count, create_time, update_time
      )
    values (#{nodeId,jdbcType=VARCHAR}, #{date,jdbcType=TIMESTAMP}, #{statDelegateValueMax,jdbcType=DECIMAL}, 
      #{statDelegateValueMin,jdbcType=DECIMAL}, #{statDelegateValueAvg,jdbcType=DECIMAL}, 
      #{statDelegateValueTotal,jdbcType=DECIMAL}, #{statDelegateValueCount,jdbcType=INTEGER}, 
      #{statStakingValueMax,jdbcType=DECIMAL}, #{statStakingValueMin,jdbcType=DECIMAL}, 
      #{statStakingValueAvg,jdbcType=DECIMAL}, #{statStakingValueTotal,jdbcType=DECIMAL}, 
      #{statStakingValueCount,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.platon.browser.dao.entity.NodeHistoryTotalAndStatDelegateValue">
    insert into node_history_total_and_stat_delegate_value
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="nodeId != null">
        node_id,
      </if>
      <if test="date != null">
        `date`,
      </if>
      <if test="statDelegateValueMax != null">
        stat_delegate_value_max,
      </if>
      <if test="statDelegateValueMin != null">
        stat_delegate_value_min,
      </if>
      <if test="statDelegateValueAvg != null">
        stat_delegate_value_avg,
      </if>
      <if test="statDelegateValueTotal != null">
        stat_delegate_value_total,
      </if>
      <if test="statDelegateValueCount != null">
        stat_delegate_value_count,
      </if>
      <if test="statStakingValueMax != null">
        stat_staking_value_max,
      </if>
      <if test="statStakingValueMin != null">
        stat_staking_value_min,
      </if>
      <if test="statStakingValueAvg != null">
        stat_staking_value_avg,
      </if>
      <if test="statStakingValueTotal != null">
        stat_staking_value_total,
      </if>
      <if test="statStakingValueCount != null">
        stat_staking_value_count,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="nodeId != null">
        #{nodeId,jdbcType=VARCHAR},
      </if>
      <if test="date != null">
        #{date,jdbcType=TIMESTAMP},
      </if>
      <if test="statDelegateValueMax != null">
        #{statDelegateValueMax,jdbcType=DECIMAL},
      </if>
      <if test="statDelegateValueMin != null">
        #{statDelegateValueMin,jdbcType=DECIMAL},
      </if>
      <if test="statDelegateValueAvg != null">
        #{statDelegateValueAvg,jdbcType=DECIMAL},
      </if>
      <if test="statDelegateValueTotal != null">
        #{statDelegateValueTotal,jdbcType=DECIMAL},
      </if>
      <if test="statDelegateValueCount != null">
        #{statDelegateValueCount,jdbcType=INTEGER},
      </if>
      <if test="statStakingValueMax != null">
        #{statStakingValueMax,jdbcType=DECIMAL},
      </if>
      <if test="statStakingValueMin != null">
        #{statStakingValueMin,jdbcType=DECIMAL},
      </if>
      <if test="statStakingValueAvg != null">
        #{statStakingValueAvg,jdbcType=DECIMAL},
      </if>
      <if test="statStakingValueTotal != null">
        #{statStakingValueTotal,jdbcType=DECIMAL},
      </if>
      <if test="statStakingValueCount != null">
        #{statStakingValueCount,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.platon.browser.dao.entity.NodeHistoryTotalAndStatDelegateValueExample" resultType="java.lang.Long">
    select count(*) from node_history_total_and_stat_delegate_value
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update node_history_total_and_stat_delegate_value
    <set>
      <if test="record.nodeId != null">
        node_id = #{record.nodeId,jdbcType=VARCHAR},
      </if>
      <if test="record.date != null">
        `date` = #{record.date,jdbcType=TIMESTAMP},
      </if>
      <if test="record.statDelegateValueMax != null">
        stat_delegate_value_max = #{record.statDelegateValueMax,jdbcType=DECIMAL},
      </if>
      <if test="record.statDelegateValueMin != null">
        stat_delegate_value_min = #{record.statDelegateValueMin,jdbcType=DECIMAL},
      </if>
      <if test="record.statDelegateValueAvg != null">
        stat_delegate_value_avg = #{record.statDelegateValueAvg,jdbcType=DECIMAL},
      </if>
      <if test="record.statDelegateValueTotal != null">
        stat_delegate_value_total = #{record.statDelegateValueTotal,jdbcType=DECIMAL},
      </if>
      <if test="record.statDelegateValueCount != null">
        stat_delegate_value_count = #{record.statDelegateValueCount,jdbcType=INTEGER},
      </if>
      <if test="record.statStakingValueMax != null">
        stat_staking_value_max = #{record.statStakingValueMax,jdbcType=DECIMAL},
      </if>
      <if test="record.statStakingValueMin != null">
        stat_staking_value_min = #{record.statStakingValueMin,jdbcType=DECIMAL},
      </if>
      <if test="record.statStakingValueAvg != null">
        stat_staking_value_avg = #{record.statStakingValueAvg,jdbcType=DECIMAL},
      </if>
      <if test="record.statStakingValueTotal != null">
        stat_staking_value_total = #{record.statStakingValueTotal,jdbcType=DECIMAL},
      </if>
      <if test="record.statStakingValueCount != null">
        stat_staking_value_count = #{record.statStakingValueCount,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update node_history_total_and_stat_delegate_value
    set node_id = #{record.nodeId,jdbcType=VARCHAR},
      `date` = #{record.date,jdbcType=TIMESTAMP},
      stat_delegate_value_max = #{record.statDelegateValueMax,jdbcType=DECIMAL},
      stat_delegate_value_min = #{record.statDelegateValueMin,jdbcType=DECIMAL},
      stat_delegate_value_avg = #{record.statDelegateValueAvg,jdbcType=DECIMAL},
      stat_delegate_value_total = #{record.statDelegateValueTotal,jdbcType=DECIMAL},
      stat_delegate_value_count = #{record.statDelegateValueCount,jdbcType=INTEGER},
      stat_staking_value_max = #{record.statStakingValueMax,jdbcType=DECIMAL},
      stat_staking_value_min = #{record.statStakingValueMin,jdbcType=DECIMAL},
      stat_staking_value_avg = #{record.statStakingValueAvg,jdbcType=DECIMAL},
      stat_staking_value_total = #{record.statStakingValueTotal,jdbcType=DECIMAL},
      stat_staking_value_count = #{record.statStakingValueCount,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.platon.browser.dao.entity.NodeHistoryTotalAndStatDelegateValue">
    update node_history_total_and_stat_delegate_value
    <set>
      <if test="statDelegateValueMax != null">
        stat_delegate_value_max = #{statDelegateValueMax,jdbcType=DECIMAL},
      </if>
      <if test="statDelegateValueMin != null">
        stat_delegate_value_min = #{statDelegateValueMin,jdbcType=DECIMAL},
      </if>
      <if test="statDelegateValueAvg != null">
        stat_delegate_value_avg = #{statDelegateValueAvg,jdbcType=DECIMAL},
      </if>
      <if test="statDelegateValueTotal != null">
        stat_delegate_value_total = #{statDelegateValueTotal,jdbcType=DECIMAL},
      </if>
      <if test="statDelegateValueCount != null">
        stat_delegate_value_count = #{statDelegateValueCount,jdbcType=INTEGER},
      </if>
      <if test="statStakingValueMax != null">
        stat_staking_value_max = #{statStakingValueMax,jdbcType=DECIMAL},
      </if>
      <if test="statStakingValueMin != null">
        stat_staking_value_min = #{statStakingValueMin,jdbcType=DECIMAL},
      </if>
      <if test="statStakingValueAvg != null">
        stat_staking_value_avg = #{statStakingValueAvg,jdbcType=DECIMAL},
      </if>
      <if test="statStakingValueTotal != null">
        stat_staking_value_total = #{statStakingValueTotal,jdbcType=DECIMAL},
      </if>
      <if test="statStakingValueCount != null">
        stat_staking_value_count = #{statStakingValueCount,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where node_id = #{nodeId,jdbcType=VARCHAR}
      and `date` = #{date,jdbcType=TIMESTAMP}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.platon.browser.dao.entity.NodeHistoryTotalAndStatDelegateValue">
    update node_history_total_and_stat_delegate_value
    set stat_delegate_value_max = #{statDelegateValueMax,jdbcType=DECIMAL},
      stat_delegate_value_min = #{statDelegateValueMin,jdbcType=DECIMAL},
      stat_delegate_value_avg = #{statDelegateValueAvg,jdbcType=DECIMAL},
      stat_delegate_value_total = #{statDelegateValueTotal,jdbcType=DECIMAL},
      stat_delegate_value_count = #{statDelegateValueCount,jdbcType=INTEGER},
      stat_staking_value_max = #{statStakingValueMax,jdbcType=DECIMAL},
      stat_staking_value_min = #{statStakingValueMin,jdbcType=DECIMAL},
      stat_staking_value_avg = #{statStakingValueAvg,jdbcType=DECIMAL},
      stat_staking_value_total = #{statStakingValueTotal,jdbcType=DECIMAL},
      stat_staking_value_count = #{statStakingValueCount,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where node_id = #{nodeId,jdbcType=VARCHAR}
      and `date` = #{date,jdbcType=TIMESTAMP}
  </update>
  <insert id="batchInsert" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into node_history_total_and_stat_delegate_value
    (node_id, `date`, stat_delegate_value_max, stat_delegate_value_min, stat_delegate_value_avg, 
      stat_delegate_value_total, stat_delegate_value_count, stat_staking_value_max, stat_staking_value_min, 
      stat_staking_value_avg, stat_staking_value_total, stat_staking_value_count, create_time, 
      update_time)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.nodeId,jdbcType=VARCHAR}, #{item.date,jdbcType=TIMESTAMP}, #{item.statDelegateValueMax,jdbcType=DECIMAL}, 
        #{item.statDelegateValueMin,jdbcType=DECIMAL}, #{item.statDelegateValueAvg,jdbcType=DECIMAL}, 
        #{item.statDelegateValueTotal,jdbcType=DECIMAL}, #{item.statDelegateValueCount,jdbcType=INTEGER}, 
        #{item.statStakingValueMax,jdbcType=DECIMAL}, #{item.statStakingValueMin,jdbcType=DECIMAL}, 
        #{item.statStakingValueAvg,jdbcType=DECIMAL}, #{item.statStakingValueTotal,jdbcType=DECIMAL}, 
        #{item.statStakingValueCount,jdbcType=INTEGER}, #{item.createTime,jdbcType=TIMESTAMP}, 
        #{item.updateTime,jdbcType=TIMESTAMP})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into node_history_total_and_stat_delegate_value (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'node_id'.toString() == column.value">
          #{item.nodeId,jdbcType=VARCHAR}
        </if>
        <if test="'date'.toString() == column.value">
          #{item.date,jdbcType=TIMESTAMP}
        </if>
        <if test="'stat_delegate_value_max'.toString() == column.value">
          #{item.statDelegateValueMax,jdbcType=DECIMAL}
        </if>
        <if test="'stat_delegate_value_min'.toString() == column.value">
          #{item.statDelegateValueMin,jdbcType=DECIMAL}
        </if>
        <if test="'stat_delegate_value_avg'.toString() == column.value">
          #{item.statDelegateValueAvg,jdbcType=DECIMAL}
        </if>
        <if test="'stat_delegate_value_total'.toString() == column.value">
          #{item.statDelegateValueTotal,jdbcType=DECIMAL}
        </if>
        <if test="'stat_delegate_value_count'.toString() == column.value">
          #{item.statDelegateValueCount,jdbcType=INTEGER}
        </if>
        <if test="'stat_staking_value_max'.toString() == column.value">
          #{item.statStakingValueMax,jdbcType=DECIMAL}
        </if>
        <if test="'stat_staking_value_min'.toString() == column.value">
          #{item.statStakingValueMin,jdbcType=DECIMAL}
        </if>
        <if test="'stat_staking_value_avg'.toString() == column.value">
          #{item.statStakingValueAvg,jdbcType=DECIMAL}
        </if>
        <if test="'stat_staking_value_total'.toString() == column.value">
          #{item.statStakingValueTotal,jdbcType=DECIMAL}
        </if>
        <if test="'stat_staking_value_count'.toString() == column.value">
          #{item.statStakingValueCount,jdbcType=INTEGER}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>